
fn TrieNode() {
    return {
        children: {},
        isWord: false
    };
}

fn buildTrie(words) {
    const root = TrieNode();
    for (const word : words) {
        let node = root;
        for (const ch : word) {
            if (!node.children.contains(ch))
                node.children.set(ch, TrieNode());
            node = node.children[ch];
        }
        node.isWord = true;
    }
    return root;
}

fn collectWords(node, prefix, result) {
    if (node.isWord)
        result.push(prefix);


    const keys = node.children.keys();

    for(const key : keys){
        collectWords(node.children[key], prefix + key, result);
    }
}

fn autocomplete(trie, prefix) {
    let node = trie;
    for (const ch : prefix) {
        if (!node.children.contains(ch))
            return [];
        node = node.children[ch];
    }
    const result = [];
    collectWords(node, prefix, result);
    return result;
}

fn arrayConcat(a, b)
{
    for(const v : b)
        a.push(v);

    return a;
}

fn main()
{
    const words = ["apple", "app", "ape", "bat", "bath", "banana"];
    const trie = buildTrie(words);

    return arrayConcat(autocomplete(trie, "ap"), autocomplete(trie, "ba"));
}