fn createFractalGenerator(seed) {
    const memo = {};

    const fractal = (n, depth) => {
        if (n <= 1) 
          return seed;
        if (memo.contains(n)) 
          return memo[n];

        const value = ((fractal(n - 1, depth + 1) * 3) ^ (fractal(n >> 1, depth + 1) + depth)) % 1000000007;
        memo.set(n, value);
        return value;
    };

    return (size) => {

        const results = [].resize(size);

        for(let i = 0; i < results.length; i++)
          results[i] = fractal(i + 1, 0);

        return results.accumulate(((acc, val) => (acc ^ val) >> 1), 0);
    };
}

fn main()
{
    const generator = createFractalGenerator(7);
    return generator(10);
}