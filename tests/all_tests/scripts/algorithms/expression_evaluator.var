fn IsNumber(v)
{
    const thingsItCouldBe = ["boolean", "int", "uint", "double"];
    return thingsItCouldBe.any((thing) => thing === typeof v);
}

fn evaluate(expr)
{
    const ops = {
        '+': { prec: 1, assoc: 'L', func: (a, b) => a + b },
        '-': { prec: 1, assoc: 'L', func: (a, b) => a - b },
        '*': { prec: 2, assoc: 'L', func: (a, b) => a * b },
        '/': { prec: 2, assoc: 'L', func: (a, b) => a / b },
        '^': { prec: 3, assoc: 'R', func: (a, b) => math.pow(a, b) }
    };

    const tokenize = fn(s) {
        const tokens = [];
        let i = 0;
        while (i < s.length) {
            const c = s[i];
            const asNum = c.code_at(0);
            const zeroAsNum = '0'.code_at(0);
            const nineAsNum = '9'.code_at(0);

            if (c === ' ') {
                i++;
            } else if ('+-*/^()'.contains(c)) {
                tokens.push(c);
                i++;
            } else if (asNum >= zeroAsNum && asNum <= nineAsNum) {
                let num = '';
                while (i < s.length && (s.code_at(i) >= zeroAsNum && s.code_at(i) <= nineAsNum || s[i] === '.')) {
                    num += s[i];
                    i++;
                }
                const float = number.stod(num);
                if(float !== undefined)
                    tokens.push(float);

            } else {
                throw "Invalid character: " + c;
            }
        }
        return tokens;
    };

    const toRPN = (tokens) => {
        const output = [];
        const stack = [];

        for (const token : tokens) {
            if (IsNumber(token)) {
                output.push(token);
            } else if (ops.contains(token)) {
                while (stack.length > 0) {
                    const top = stack[stack.length - 1];
                    if (!ops.contains(top)) 
                        break;
                    const currOp = ops[token];
                    const topOp = ops[top];
                    if ((currOp.assoc === 'L' && currOp.prec <= topOp.prec) ||
                        (currOp.assoc === 'R' && currOp.prec < topOp.prec)) {
                        output.push(stack.pop());
                    } else {
                        break;
                    }
                }
                stack.push(token);
            } else if (token === '(') {
                stack.push(token);
            } else if (token === ')') {
                while (stack.length > 0 && stack[stack.length - 1] !== '(') {
                    output.push(stack.pop());
                }
                stack.pop(); // Remove '('
            }
        }

        while (stack.length > 0) {
            output.push(stack.pop());
        }

        return output;
    };

    const evalRPN = fn(rpn) {
        const stack = [];
        for (const token : rpn) {
            if (IsNumber(token)) {
                stack.push(token);
            } else {
                const b = stack.pop();
                const a = stack.pop();
                stack.push(ops[token].func(a, b));
            }
        }
        return stack[0];
    };

    return evalRPN(toRPN(tokenize(expr)));

}

fn main()
{
    try{
        return [
            number.setprecision(evaluate("2 + 3 * 5"), 1),             // "17.0"
            number.setprecision(evaluate("3 + 4 * 2 / (1 - 5)^2"), 1), // "3.5"
            number.setprecision(evaluate("8 ^ 2"), 1)                  // "64.0"
        ];
    } catch(ex){
        return ex;
    }
}