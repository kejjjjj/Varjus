#pragma once

#include <array>

class IValue;
class CVariable;

namespace Varjus {
	class CProgramRuntime;
}
using OperatorFunc = IValue*(*)(Varjus::CProgramRuntime* const, IValue*, IValue*);

#define FORWARD_DECLARE_OPERATOR(Name)\
IValue* Name(Varjus::CProgramRuntime* const runtime, IValue* lhs, IValue* rhs);

FORWARD_DECLARE_OPERATOR(OP_ASSIGNMENT)
FORWARD_DECLARE_OPERATOR(OP_ADDITION)
FORWARD_DECLARE_OPERATOR(OP_SUBTRACTION)
FORWARD_DECLARE_OPERATOR(OP_MULTIPLICATION)
FORWARD_DECLARE_OPERATOR(OP_DIVISION)
FORWARD_DECLARE_OPERATOR(OP_MODULO)

FORWARD_DECLARE_OPERATOR(OP_LESS_THAN)
FORWARD_DECLARE_OPERATOR(OP_LESS_EQUAL)

FORWARD_DECLARE_OPERATOR(OP_GREATER_THAN)
FORWARD_DECLARE_OPERATOR(OP_GREATER_EQUAL)

FORWARD_DECLARE_OPERATOR(OP_EQUALITY)
FORWARD_DECLARE_OPERATOR(OP_UNEQUALITY)

FORWARD_DECLARE_OPERATOR(OP_STRICT_EQUALITY)
FORWARD_DECLARE_OPERATOR(OP_STRICT_UNEQUALITY)

FORWARD_DECLARE_OPERATOR(OP_LOGICAL_AND)
FORWARD_DECLARE_OPERATOR(OP_LOGICAL_OR)

FORWARD_DECLARE_OPERATOR(OP_LEFT_SHIFT)
FORWARD_DECLARE_OPERATOR(OP_RIGHT_SHIFT)

FORWARD_DECLARE_OPERATOR(OP_BITWISE_OR)
FORWARD_DECLARE_OPERATOR(OP_BITWISE_XOR)
FORWARD_DECLARE_OPERATOR(OP_BITWISE_AND)

FORWARD_DECLARE_OPERATOR(OP_ASSIGNMENT_ADDITION)
FORWARD_DECLARE_OPERATOR(OP_ASSIGNMENT_SUBTRACTION)
FORWARD_DECLARE_OPERATOR(OP_ASSIGNMENT_MULTIPLICATION)
FORWARD_DECLARE_OPERATOR(OP_ASSIGNMENT_DIVISION)
FORWARD_DECLARE_OPERATOR(OP_ASSIGNMENT_MODULO)

FORWARD_DECLARE_OPERATOR(OP_ASSIGNMENT_LEFT_SHIFT)
FORWARD_DECLARE_OPERATOR(OP_ASSIGNMENT_RIGHT_SHIFT)

FORWARD_DECLARE_OPERATOR(OP_ASSIGNMENT_BITWISE_OR)
FORWARD_DECLARE_OPERATOR(OP_ASSIGNMENT_BITWISE_XOR)
FORWARD_DECLARE_OPERATOR(OP_ASSIGNMENT_BITWISE_AND)

FORWARD_DECLARE_OPERATOR(OP_ASSIGNMENT_SWAP)


#define NUM_OPERATORS 33ull

//VERY IMPORTANT THAT THESE HAVE THE SAME ORDER AS CPunctuation
constexpr std::array<OperatorFunc, NUM_OPERATORS> m_oOperatorTable = { {

	nullptr,          // p_error
	OP_ADDITION,      // p_add
	OP_SUBTRACTION,   // p_sub
	OP_MULTIPLICATION,// p_multiplication,
	OP_DIVISION,	  // p_division,
	OP_MODULO,	      // p_modulo,

	OP_LESS_THAN,     // p_less_than
	OP_LESS_EQUAL,    // p_less_equal
	OP_GREATER_THAN,  // p_greater_than
	OP_GREATER_EQUAL, // p_greater_equal

	OP_EQUALITY,          // p_equality
	OP_UNEQUALITY,        // p_unequality
	OP_STRICT_EQUALITY,   // p_strict_equality
	OP_STRICT_UNEQUALITY, // p_strict_unequality

	OP_LOGICAL_AND,   // p_logical_and,
	OP_LOGICAL_OR,    // p_logical_or,

	OP_LEFT_SHIFT,    // p_left_shift
	OP_RIGHT_SHIFT,   // p_right_shift

	OP_BITWISE_OR,    // p_bitwise_or
	OP_BITWISE_XOR,   // p_bitwise_xor
	OP_BITWISE_AND,   // p_bitwise_and

	OP_ASSIGNMENT,    // p_assign

	OP_ASSIGNMENT_ADDITION,	     // p_assignment_addition
	OP_ASSIGNMENT_SUBTRACTION,	 // p_assignment_subtraction
	OP_ASSIGNMENT_MULTIPLICATION,// p_assignment_multiplication
	OP_ASSIGNMENT_DIVISION,	     // p_assignment_division
	OP_ASSIGNMENT_MODULO,	     // p_assignment_modulo

	OP_ASSIGNMENT_LEFT_SHIFT, 	// p_assignment_left_shift
	OP_ASSIGNMENT_RIGHT_SHIFT,	// p_assignment_right_shift

	OP_ASSIGNMENT_BITWISE_OR,	// p_assignment_bitwise_or
	OP_ASSIGNMENT_BITWISE_XOR,	// p_assignment_bitwise_xor
	OP_ASSIGNMENT_BITWISE_AND,	// p_assignment_bitwise_and

	OP_ASSIGNMENT_SWAP          // p_swap
} };


